import heapq
import math
from itertools import count

def heuristic(node, goal, coords):
    """Euclidean distance between node and goal (A* heuristic)."""
    x1, y1 = coords[node]
    x2, y2 = coords[goal]
    return math.hypot(x2 - x1, y2 - y1)

def a_star(graph, start, goal, coords):
    """
    graph: dict -> node: [(neighbor, cost), ...]
    start, goal: node identifiers (str or int)
    coords: dict -> node: (x, y)
    Returns: (path_list or None, total_cost, nodes_explored)
    """
    counter = count()  
    open_heap = []
    start_f = heuristic(start, goal, coords)
    heapq.heappush(open_heap, (start_f, 0.0, next(counter), start))

    came_from = {start: None}
    cost_so_far = {start: 0.0}
    explored = 0

    while open_heap:
        f, g, _, current = heapq.heappop(open_heap)
        explored += 1

        if current == goal:
            # reconstruct path
            path = []
            n = current
            while n is not None:
                path.append(n)
                n = came_from.get(n)
            path.reverse()
            return path, cost_so_far[goal], explored

        for neighbor, edge_cost in graph.get(current, []):
            new_g = g + edge_cost
            if neighbor not in cost_so_far or new_g < cost_so_far[neighbor]:
                cost_so_far[neighbor] = new_g
                came_from[neighbor] = current
                f_new = new_g + heuristic(neighbor, goal, coords)
                heapq.heappush(open_heap, (f_new, new_g, next(counter), neighbor))

    return None, float("inf"), explore
if __name__ == "__main__":
    graph = {
        'A': [('B', 1), ('C', 4)],
        'B': [('A', 1), ('C', 10), ('D', 2), ('E', 5)],
        'C': [('A', 4), ('F', 3)],
        'D': [('B', 2)],
        'E': [('B', 5), ('F', 1)],
        'F': [('C', 3), ('E', 1)]
    }

    coords = {
        'A': (0, 5),
        'B': (1, 3),
        'C': (4, 2),
        'D': (0, 2),
        'E': (3, 1),
        'F': (5, 0)
    }

    start, goal = 'A', 'F'
    path, cost, explored = a_star(graph, start, goal, coords)

    if path:
        print("Path found:")
        print("  Path:", " -> ".join(map(str, path)))
        print("  Total cost:", cost)
        print("  Nodes in path:", len(path))
        print("  Nodes explored:", explored)
    else:
        print("No path found.")
